{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Vari√°veis\n\nCria√ß√£o das palavras reservadas `let` e `const` para cria√ß√£o de vari√°veis"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Var\n- Tipagem fraca e din√¢mica"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var a\n\na = 1;\nconsole.log(a, typeof a)\n\na = true\nconsole.log(a, typeof a)\n\na = 'teste'\nconsole.log(a, typeof a)\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "- Escopo de fun√ß√£o\n\n> A vari√°vel `a` √© acess√≠vel dentro e fora da func√£o `f`. Por√©m, a vari√°vel `b` apenas √© acess√≠vel dentro da fun√ß√£o `f`."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var variavelGlobal = 1;\n\nfunction f () {\n    console.log('Global: ', variavelGlobal)\n    variavelGlobal = 'novo valor'\n\n    var local = 2\n    console.log('Local: ', local)\n}\n\nf()\n\nconsole.log('Global: ', variavelGlobal)\nconsole.log('Local: ', local)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "- Hoisting: comportamento do JavaScript que faz com que uma declara√ß√£o de uma vari√°vel seja sempre movida para o in√≠cio do escopo\n\n> A vari√°vel `naoExiste` nunca foi criada."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function f() {\n    console.log(naoExiste)\n}\n\nf()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> A vari√°vel `criadaDepois` √© utilizada antes de ser declarada, por√©m n√£o √© um problema, uma vez que o hoisting faz com que todas as declara√ß√µes aconte√ßam no in√≠cio do escopo.\n\n> Por√©m, seu valor ser√° `undefined` at√© que haja uma atribui√ß√£o."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function f() {\n    console.log(criadaDepois)\n    \n    var criadaDepois = 'um valor qualquer'\n    \n    console.log(criadaDepois)\n}\n\nf()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Let e Const\n- Continuam com tipagem din√¢mica\n- `let` permite reatribuir um valor, enquanto `const` n√£o permite\n- Uma vari√°vel criada com `const` sempre deve ter um valor atribu√≠do a ela no momento da cria√ß√£o "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let criadaComLet;\n\ncriadaComLet = 'teste'\nconsole.log(criadaComLet)\n\ncriadaComLet = true\nconsole.log(criadaComLet)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> Vari√°veis criadas com `const` exigem que um valor seja definido na inicializa√ß√£o"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const criadaComConst;\nconsole.log(criadaComConst)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> N√£o √© poss√≠vel atribuir um novo valor a uma vari√°vel criada com `const`"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const comConst = 1;\nconsole.log(comConst)\n\n// N√£o deveria funcionar, mas a extens√£o do VS Code √© limitada üòê\ncomConst = 'teste'\nconsole.log(comConst)\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "`let` e `const` possuem escopo de bloco, delimitados por `{` e `}`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> A vari√°vel criada com `var` existe dentro de fora do `if`, pois `if` n√£o √© uma fun√ß√£o. \n\n> Por√©m, as vari√°veis criadas com `let` e `const`, que seguem o escopo de bloco, ficam inacess√≠veis fora do `if`."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "if (true) {\n    var varExiste = true\n    let letNaoExiste = true\n    const constTbmNao = true\n\n    console.log('Var, Let e Const: ', varExiste, letNaoExiste, constTbmNao)\n}\n\nconsole.log('Var: ', varExiste)\nconsole.log('Let e const d√£o ruim: ', letNaoExiste, constTbmNao)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "`let` e `const` n√£o s√£o afetados pelo hoisting"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function f() {\n    console.log(meuLet)\n    let meuLet = 1\n    console.log(meuLet)\n}\n\nf()"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function f() {\n    let meuLet = 1\n    console.log(meuLet)\n}\n\nf()"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function f() {\n    const meuConst = 1\n    console.log(meuConst)\n}\n\nf()"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function f() {\n    console.log(meuConst)\n    const meuConst = 1\n    console.log(meuConst)\n}\n\nf()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Objetos e arrays criados com `const` tamb√©m n√£o permitem reatribui√ß√£o de valores, mas permitem que seus valores sejam alterados:\n\n> √â poss√≠vel atribuir novos valores √†s propriedades dos objetos"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const obj = {\n    prop: 1\n}\n\nconsole.log(obj.prop)\n\nobj.prop = 'outro valor'\n\nconsole.log(obj.prop)\n\n// N√£o deveria funcionar, mas a extens√£o do VS Code √© limitada üòê\nobj = {\n    prop: 'atribuicao direta n√£o funciona'\n}\n\nconsole.log(obj.prop)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "> √â poss√≠vel adicionar, modificar e remover valores de arrays normalmente"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const arr = new Array()\n\narr.push(1)\nconsole.log(arr)\n\narr[1] = 'teste'\nconsole.log(arr)\n\narr.pop()\nconsole.log(arr)"
            ],
            "outputs": []
        }
    ]
}